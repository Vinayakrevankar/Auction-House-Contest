// This file is auto-generated by @hey-api/openapi-ts

/**
 * User info
 */
export type UserInfo = {
    /**
     * Username
     */
    username: string;
    /**
     * User email
     */
    emailAddress: string;
    /**
     * User ID
     */
    userId: string;
    /**
     * User type, one of [seller, buyer]
     */
    userType: 'seller' | 'buyer';
    /**
     * User role, one of [admin, user]
     */
    role: 'admin' | 'user';
    /**
     * JWT token
     */
    token: string;
};

/**
 * User type, one of [seller, buyer]
 */
export type userType = 'seller' | 'buyer';

/**
 * User role, one of [admin, user]
 */
export type role = 'admin' | 'user';

/**
 * Item in auction
 */
export type Item = {
    /**
     * Item ID, in UUID
     */
    id: string;
    /**
     * Item name
     */
    name: string;
    /**
     * Item description
     */
    description: string;
    /**
     * Initial price, > $1
     */
    initPrice: number;
    /**
     * Auction start date time
     */
    startDate: string;
    /**
     * Auction end date time
     */
    endDate: string;
    /**
     * Auction length, in days
     */
    lengthOfAuction: number;
    /**
     * Current state of item
     */
    itemState: 'active' | 'archived' | 'completed' | 'failed' | 'inactive';
    /**
     * Freeze status
     */
    isFrozen: boolean;
    /**
     * S3 image keys
     */
    images: Array<(string)>;
    /**
     * Current bid ID, in UUID
     */
    currentBidId?: string;
    /**
     * Historic bids
     */
    pastBidIds?: Array<(string)>;
    /**
     * Item sold bid ID, in UUID
     */
    soldBidId?: string;
    /**
     * Seller ID who posted the item
     */
    sellerId: string;
    /**
     * UNIX Timestamp
     */
    createAt: number;
};

/**
 * Current state of item
 */
export type itemState = 'active' | 'archived' | 'completed' | 'failed' | 'inactive';

/**
 * Bid to an item
 */
export type Bid = {
    /**
     * Bid ID, in UUID
     */
    id: string;
    /**
     * Item ID of the bid, in UUID
     */
    bidItemId: string;
    /**
     * Buyer ID who placed the bid
     */
    bidUserId: string;
    /**
     * Bid amount
     */
    bidAmount: number;
    /**
     * Bid time
     */
    bidTime: string;
    /**
     * UNIX Timestamp
     */
    createAt: number;
};

/**
 * Purchase Data
 */
export type Purchase = {
    /**
     * Item ID, in UUID
     */
    itemId: string;
    /**
     * Item name
     */
    itemName: string;
    /**
     * Purchased price
     */
    price: number;
    /**
     * Item sold time
     */
    soldTime: string;
    /**
     * Purchase fulfilled time
     */
    fulfillTime: string;
};

export type AuctionReport = {
    totalCommissionEarned?: number;
    totalSales?: number;
    commissionRate?: number;
    itemsSold?: Array<{
        itemId?: string;
        salePrice?: number;
        commission?: number;
    }>;
};

export type ForensicReport = {
    reportId: string;
    url: string;
};

export type ItemRequestPayload = {
    /**
     * Item name
     */
    name: string;
    /**
     * Item description
     */
    description: string;
    /**
     * Initial price of item, > $1
     */
    initPrice: number;
    /**
     * Length of auction in days
     */
    lengthOfAuction: number;
    /**
     * S3 object keys for the images
     */
    images: Array<(string)>;
};

export type ParameterSellerID = string;

export type ParameterItemID = string;

export type ParameterBuyerID = string;

export type UserLoginData = {
    body?: {
        /**
         * User email
         */
        emailAddress: string;
        /**
         * User password
         */
        password: string;
    };
};

export type UserLoginResponse = ({
    info: UserInfo;
});

export type UserLoginError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type UserRegisterData = {
    body?: {
        /**
         * Username
         */
        username: string;
        /**
         * User email address
         */
        emailAddress: string;
        /**
         * User password
         */
        password: string;
        /**
         * User first name
         */
        firstName: string;
        /**
         * User last name
         */
        lastName: string;
        /**
         * User type, one of [seller, buyer]
         */
        userType: 'seller' | 'buyer';
        /**
         * User role, one of [admin, user]
         */
        role: 'admin' | 'user';
    };
};

export type UserRegisterResponse = ({
    info: UserInfo;
});

export type UserRegisterError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type ImageUploadData = {
    body?: {
        /**
         * Image data to upload
         */
        image: (Blob | File);
    };
};

export type ImageUploadResponse = ({
    /**
     * S3 object key
     */
    key: string;
});

export type ImageUploadError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type SellerCloseData = {
    path: {
        sellerId: string;
    };
};

export type SellerCloseResponse = (unknown);

export type SellerCloseError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type SellerReviewItemData = {
    path: {
        sellerId: string;
    };
};

export type SellerReviewItemResponse = (Array<Item>);

export type SellerReviewItemError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type SellerAddItemData = {
    body?: ItemRequestPayload;
    path: {
        sellerId: string;
    };
};

export type SellerAddItemResponse = (unknown);

export type SellerAddItemError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type SellerDeleteItemData = {
    path: {
        itemId: string;
        sellerId: string;
    };
};

export type SellerDeleteItemResponse = (unknown);

export type SellerDeleteItemError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type SellerUpdateItemData = {
    body?: ItemRequestPayload;
    path: {
        itemId: string;
        sellerId: string;
    };
};

export type SellerUpdateItemResponse = (unknown);

export type SellerUpdateItemError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type SellerItemPublishData = {
    path: {
        itemId: string;
        sellerId: string;
    };
};

export type SellerItemPublishResponse = (unknown);

export type SellerItemPublishError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type SellerItemUnpublishData = {
    path: {
        itemId: string;
        sellerId: string;
    };
};

export type SellerItemUnpublishResponse = (unknown);

export type SellerItemUnpublishError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type SellerItemFulfillData = {
    path: {
        itemId: string;
        sellerId: string;
    };
};

export type SellerItemFulfillResponse = ({
    itemId: string;
    soldBid: Bid;
    soldTime: string;
});

export type SellerItemFulfillError = ({
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
} | unknown);

export type SellerItemArchiveData = {
    path: {
        itemId: string;
        sellerId: string;
    };
};

export type SellerItemArchiveResponse = (unknown);

export type SellerItemArchiveError = ({
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
} | unknown);

export type SellerItemRequestUnfreezeData = {
    path: {
        itemId: string;
        sellerId: string;
    };
};

export type SellerItemRequestUnfreezeResponse = (unknown);

export type SellerItemRequestUnfreezeError = ({
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
} | unknown);

export type BuyerCloseData = {
    path: {
        buyerId: string;
    };
};

export type BuyerCloseResponse = (unknown);

export type BuyerCloseError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type BuyerAddFundsData = {
    body?: {
        /**
         * Amount of funds to add
         */
        amount: number;
    };
    path: {
        buyerId: string;
    };
};

export type BuyerAddFundsResponse = ({
    /**
     * ID of the buyer
     */
    buyerId: string;
    /**
     * Current fund of the buyer
     */
    funds: number;
});

export type BuyerAddFundsError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type BuyerBidsData = {
    path: {
        buyerId: string;
    };
};

export type BuyerBidsResponse = (Array<Bid>);

export type BuyerBidsError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type BuyerBidsPlaceData = {
    /**
     * Bid an item
     */
    body?: {
        /**
         * Item ID to bid, in UUID
         */
        itemId: string;
        /**
         * Bid amount
         */
        bidAmount: number;
    };
    path: {
        buyerId: string;
    };
};

export type BuyerBidsPlaceResponse = ({
    bid: Bid;
});

export type BuyerBidsPlaceError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type BuyerPurchasesData = {
    path: {
        buyerId: string;
    };
};

export type BuyerPurchasesResponse = (Array<Purchase>);

export type BuyerPurchasesError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type ItemSearchData = {
    query?: {
        /**
         * Keywords for searching item
         */
        keywords?: string;
        /**
         * Maximum price for item price range
         */
        maxPrice?: number;
        /**
         * Minimum price for item price range
         */
        minPrice?: number;
        /**
         * Field to sort by
         */
        sortBy?: 'price' | 'date';
        /**
         * Sort order
         */
        sortOrder?: 'asc' | 'desc';
    };
};

export type ItemSearchResponse = (Array<Item>);

export type ItemSearchError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type ItemGetActiveData = unknown;

export type ItemGetActiveResponse = (Array<Item>);

export type ItemGetActiveError = unknown;

export type ItemDetailData = {
    path: {
        itemId: string;
    };
};

export type ItemDetailResponse = (Item);

export type ItemDetailError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type ItemBidsData = {
    path: {
        itemId: string;
    };
};

export type ItemBidsResponse = (Array<Bid>);

export type ItemBidsError = unknown;

export type ItemRecentlySoldData = {
    query?: {
        /**
         * Keywords for searching item
         */
        keywords?: string;
        /**
         * Maximum price for item price range
         */
        maxPrice?: number;
        /**
         * Minimum price for item price range
         */
        minPrice?: number;
        /**
         * Field to sort by
         */
        sortBy?: 'price' | 'date';
        /**
         * Sort order
         */
        sortOrder?: 'asc' | 'desc';
    };
};

export type ItemRecentlySoldResponse = (Array<Item>);

export type ItemRecentlySoldError = ({
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type AdminFreezeItemData = {
    body?: {
        /**
         * Freeze or unfreeze
         */
        action: 'freeze' | 'unfreeze';
    };
    path: {
        itemId: string;
    };
};

export type AdminFreezeItemResponse = ({
    /**
     * Target item ID, in UUID
     */
    itemId: string;
    isFrozen: boolean;
});

export type AdminFreezeItemError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type AdminAuctionReportData = unknown;

export type AdminAuctionReportResponse = (AuctionReport);

export type AdminAuctionReportError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});

export type AdminForensicReportData = unknown;

export type AdminForensicReportResponse = (ForensicReport);

export type AdminForensicReportError = (unknown | {
    /**
     * Error source
     */
    error: string;
    /**
     * Error message from error source
     */
    src: string;
});
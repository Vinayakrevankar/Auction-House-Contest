// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { UserLoginData, UserLoginError, UserLoginResponse, UserRegisterData, UserRegisterError, UserRegisterResponse, UploadImageData, UploadImageError, UploadImageResponse, SellerCloseData, SellerCloseError, SellerCloseResponse, SellerReviewItemData, SellerReviewItemError, SellerReviewItemResponse, SellerAddItemData, SellerAddItemError, SellerAddItemResponse, SellerDeleteItemData, SellerDeleteItemError, SellerDeleteItemResponse, SellerUpdateItemData, SellerUpdateItemError, SellerUpdateItemResponse, SellerItemPublishData, SellerItemPublishError, SellerItemPublishResponse, SellerItemUnpublishData, SellerItemUnpublishError, SellerItemUnpublishResponse, SellerItemFulfillData, SellerItemFulfillError, SellerItemFulfillResponse, SellerItemArchiveData, SellerItemArchiveError, SellerItemArchiveResponse, SellerItemRequestUnfreezeData, SellerItemRequestUnfreezeError, SellerItemRequestUnfreezeResponse, BuyerCloseData, BuyerCloseError, BuyerCloseResponse, BuyerAddFundsData, BuyerAddFundsError, BuyerAddFundsResponse, BuyerBidsData, BuyerBidsError, BuyerBidsResponse, BuyerBidsPlaceData, BuyerBidsPlaceError, BuyerBidsPlaceResponse, BuyerPurchasesData, BuyerPurchasesError, BuyerPurchasesResponse, ItemSearchData, ItemSearchError, ItemSearchResponse, ItemGetActiveData, ItemGetActiveError, ItemGetActiveResponse, ItemDetailData, ItemDetailError, ItemDetailResponse, ItemBidsData, ItemBidsError, ItemBidsResponse, ItemRecentlySoldData, ItemRecentlySoldError, ItemRecentlySoldResponse, AdminFreezeItemData, AdminFreezeItemError, AdminFreezeItemResponse, AdminAuctionReportData, AdminAuctionReportError, AdminAuctionReportResponse, AdminForensicReportData, AdminForensicReportError, AdminForensicReportResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * User Login Endpoint
 */
export const userLogin = <ThrowOnError extends boolean = false>(options?: Options<UserLoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<UserLoginResponse, UserLoginError, ThrowOnError>({
        ...options,
        url: '/api/login'
    });
};

/**
 * User Register Endpoint
 */
export const userRegister = <ThrowOnError extends boolean = false>(options?: Options<UserRegisterData, ThrowOnError>) => {
    return (options?.client ?? client).post<UserRegisterResponse, UserRegisterError, ThrowOnError>({
        ...options,
        url: '/api/register'
    });
};

/**
 * Upload image to S3
 */
export const uploadImage = <ThrowOnError extends boolean = false>(options?: Options<UploadImageData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadImageResponse, UploadImageError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/api/upload-image'
    });
};

/**
 * Close seller account
 */
export const sellerClose = <ThrowOnError extends boolean = false>(options: Options<SellerCloseData, ThrowOnError>) => {
    return (options?.client ?? client).post<SellerCloseResponse, SellerCloseError, ThrowOnError>({
        ...options,
        url: '/api/sellers/{sellerId}/close'
    });
};

/**
 * Get seller's items
 */
export const sellerReviewItem = <ThrowOnError extends boolean = false>(options: Options<SellerReviewItemData, ThrowOnError>) => {
    return (options?.client ?? client).get<SellerReviewItemResponse, SellerReviewItemError, ThrowOnError>({
        ...options,
        url: '/api/sellers/{sellerId}/items'
    });
};

/**
 * Add item for seller
 */
export const sellerAddItem = <ThrowOnError extends boolean = false>(options: Options<SellerAddItemData, ThrowOnError>) => {
    return (options?.client ?? client).post<SellerAddItemResponse, SellerAddItemError, ThrowOnError>({
        ...options,
        url: '/api/sellers/{sellerId}/items'
    });
};

/**
 * Delete item of seller
 */
export const sellerDeleteItem = <ThrowOnError extends boolean = false>(options: Options<SellerDeleteItemData, ThrowOnError>) => {
    return (options?.client ?? client).delete<SellerDeleteItemResponse, SellerDeleteItemError, ThrowOnError>({
        ...options,
        url: '/api/sellers/{sellerId}/items/{itemId}'
    });
};

/**
 * Update item of seller
 */
export const sellerUpdateItem = <ThrowOnError extends boolean = false>(options: Options<SellerUpdateItemData, ThrowOnError>) => {
    return (options?.client ?? client).put<SellerUpdateItemResponse, SellerUpdateItemError, ThrowOnError>({
        ...options,
        url: '/api/sellers/{sellerId}/items/{itemId}'
    });
};

/**
 * Publish an item of seller
 */
export const sellerItemPublish = <ThrowOnError extends boolean = false>(options: Options<SellerItemPublishData, ThrowOnError>) => {
    return (options?.client ?? client).post<SellerItemPublishResponse, SellerItemPublishError, ThrowOnError>({
        ...options,
        url: '/api/sellers/{sellerId}/items/{itemId}/publish'
    });
};

/**
 * Unpublish an item of seller
 */
export const sellerItemUnpublish = <ThrowOnError extends boolean = false>(options: Options<SellerItemUnpublishData, ThrowOnError>) => {
    return (options?.client ?? client).post<SellerItemUnpublishResponse, SellerItemUnpublishError, ThrowOnError>({
        ...options,
        url: '/api/sellers/{sellerId}/items/{itemId}/unpublish'
    });
};

/**
 * Fulfill an item of seller
 */
export const sellerItemFulfill = <ThrowOnError extends boolean = false>(options: Options<SellerItemFulfillData, ThrowOnError>) => {
    return (options?.client ?? client).post<SellerItemFulfillResponse, SellerItemFulfillError, ThrowOnError>({
        ...options,
        url: '/api/sellers/{sellerId}/items/{itemId}/fulfill'
    });
};

/**
 * Archive an item of seller
 */
export const sellerItemArchive = <ThrowOnError extends boolean = false>(options: Options<SellerItemArchiveData, ThrowOnError>) => {
    return (options?.client ?? client).post<SellerItemArchiveResponse, SellerItemArchiveError, ThrowOnError>({
        ...options,
        url: '/api/sellers/{sellerId}/items/{itemId}/archive'
    });
};

/**
 * Request unfreeze an item of seller.
 */
export const sellerItemRequestUnfreeze = <ThrowOnError extends boolean = false>(options: Options<SellerItemRequestUnfreezeData, ThrowOnError>) => {
    return (options?.client ?? client).post<SellerItemRequestUnfreezeResponse, SellerItemRequestUnfreezeError, ThrowOnError>({
        ...options,
        url: '/api/sellers/{sellerId}/items/{itemId}/request-unfreeze'
    });
};

/**
 * Close buyer account.
 */
export const buyerClose = <ThrowOnError extends boolean = false>(options: Options<BuyerCloseData, ThrowOnError>) => {
    return (options?.client ?? client).post<BuyerCloseResponse, BuyerCloseError, ThrowOnError>({
        ...options,
        url: '/api/buyers/{buyerId}/close'
    });
};

/**
 * Add funds to buyer account.
 */
export const buyerAddFunds = <ThrowOnError extends boolean = false>(options: Options<BuyerAddFundsData, ThrowOnError>) => {
    return (options?.client ?? client).post<BuyerAddFundsResponse, BuyerAddFundsError, ThrowOnError>({
        ...options,
        url: '/api/buyers/{buyerId}/add-funds'
    });
};

/**
 * Get current bids of the buyer
 */
export const buyerBids = <ThrowOnError extends boolean = false>(options: Options<BuyerBidsData, ThrowOnError>) => {
    return (options?.client ?? client).get<BuyerBidsResponse, BuyerBidsError, ThrowOnError>({
        ...options,
        url: '/api/buyers/{buyerId}/bids'
    });
};

/**
 * Put bid on an item
 */
export const buyerBidsPlace = <ThrowOnError extends boolean = false>(options: Options<BuyerBidsPlaceData, ThrowOnError>) => {
    return (options?.client ?? client).post<BuyerBidsPlaceResponse, BuyerBidsPlaceError, ThrowOnError>({
        ...options,
        url: '/api/buyers/{buyerId}/bids'
    });
};

/**
 * Get purchases of a buyer
 */
export const buyerPurchases = <ThrowOnError extends boolean = false>(options: Options<BuyerPurchasesData, ThrowOnError>) => {
    return (options?.client ?? client).get<BuyerPurchasesResponse, BuyerPurchasesError, ThrowOnError>({
        ...options,
        url: '/api/buyers/{buyerId}/purchases'
    });
};

/**
 * Search and sort items
 */
export const itemSearch = <ThrowOnError extends boolean = false>(options?: Options<ItemSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<ItemSearchResponse, ItemSearchError, ThrowOnError>({
        ...options,
        url: '/api/items'
    });
};

/**
 * Get all active items
 */
export const itemGetActive = <ThrowOnError extends boolean = false>(options?: Options<ItemGetActiveData, ThrowOnError>) => {
    return (options?.client ?? client).get<ItemGetActiveResponse, ItemGetActiveError, ThrowOnError>({
        ...options,
        url: '/api/items/active'
    });
};

/**
 * Get item details
 */
export const itemDetail = <ThrowOnError extends boolean = false>(options: Options<ItemDetailData, ThrowOnError>) => {
    return (options?.client ?? client).get<ItemDetailResponse, ItemDetailError, ThrowOnError>({
        ...options,
        url: '/api/items/{itemId}'
    });
};

/**
 * Get bids of an item
 */
export const itemBids = <ThrowOnError extends boolean = false>(options: Options<ItemBidsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ItemBidsResponse, ItemBidsError, ThrowOnError>({
        ...options,
        url: '/api/items/{itemId}/bids'
    });
};

/**
 * Get recently sold items
 */
export const itemRecentlySold = <ThrowOnError extends boolean = false>(options?: Options<ItemRecentlySoldData, ThrowOnError>) => {
    return (options?.client ?? client).get<ItemRecentlySoldResponse, ItemRecentlySoldError, ThrowOnError>({
        ...options,
        url: '/api/items/recently-sold'
    });
};

/**
 * Freeze or unfreeze item
 */
export const adminFreezeItem = <ThrowOnError extends boolean = false>(options: Options<AdminFreezeItemData, ThrowOnError>) => {
    return (options?.client ?? client).post<AdminFreezeItemResponse, AdminFreezeItemError, ThrowOnError>({
        ...options,
        url: '/api/admin/items/{itemId}/freeze'
    });
};

/**
 * Get auction report
 */
export const adminAuctionReport = <ThrowOnError extends boolean = false>(options?: Options<AdminAuctionReportData, ThrowOnError>) => {
    return (options?.client ?? client).get<AdminAuctionReportResponse, AdminAuctionReportError, ThrowOnError>({
        ...options,
        url: '/api/admin/reports/auction'
    });
};

/**
 * Get forensic report
 */
export const adminForensicReport = <ThrowOnError extends boolean = false>(options?: Options<AdminForensicReportData, ThrowOnError>) => {
    return (options?.client ?? client).get<AdminForensicReportResponse, AdminForensicReportError, ThrowOnError>({
        ...options,
        url: '/api/admin/reports/forensic'
    });
};
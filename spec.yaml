openapi: 3.0.3
info:
  title: Auction House
  description: This is a sample description about this spec.
  termsOfService: ''
  contact:
    email: pchen1@wpi.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about spec
  url: ''
servers: []
tags:
  - name: Default
    description: ''
  - name: User
    description: ''
    externalDocs:
      description: ''
      url: ''
  - name: Image
    description: ''
    externalDocs:
      description: ''
      url: ''
  - name: Seller
    description: ''
    externalDocs:
      description: ''
      url: ''
  - name: Buyer
    description: ''
    externalDocs:
      description: ''
      url: ''
  - name: Item
    description: ''
    externalDocs:
      description: ''
      url: ''
  - name: Admin
    description: ''
    externalDocs:
      description: ''
      url: ''
paths:
  /api/login:
    post:
      summary: User Login Endpoint
      description: ''
      operationId: user-login
      tags:
        - User
      parameters: &ref_0 []
      requestBody:
        $ref: '#/components/requestBodies/UserLoginRequest'
      responses:
        '202':
          $ref: '#/components/responses/UserAuthResponse'
        '404':
          description: User not exists
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/register:
    post:
      summary: User Register Endpoint
      description: ''
      operationId: user-register
      tags:
        - User
      parameters: *ref_0
      requestBody:
        $ref: '#/components/requestBodies/UserRegisterRequest'
      responses:
        '201':
          $ref: '#/components/responses/UserAuthResponse'
        '400':
          description: Malformed Request
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/image-upload:
    post:
      summary: Upload image to S3
      description: ''
      operationId: image-upload
      tags:
        - Image
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: Image data to upload
                  format: binary
              required:
                - image
            examples:
              example1:
                value:
                  image: <binary data...>
      responses:
        '201':
          $ref: '#/components/responses/ImageUploadResponse'
        '415':
          description: Bad image file
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/sellers/{sellerId}/close:
    post:
      summary: Close seller account
      description: ''
      operationId: seller-close
      tags:
        - Seller
      parameters:
        - $ref: '#/components/parameters/SellerID'
      requestBody:
        content: {}
      responses:
        '202':
          description: Seller account closed.
          content: {}
          headers: {}
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: ''
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
    parameters: []
  /api/sellers/{sellerId}/items:
    get:
      summary: Get seller's items
      description: ''
      operationId: seller-review-item
      tags: &ref_1
        - Seller
      parameters:
        - $ref: '#/components/parameters/SellerID'
      requestBody: {}
      responses:
        '200':
          description: Returns seller's items
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: Seller not exists.
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
    post:
      summary: Add item for seller
      description: ''
      operationId: seller-add-item
      tags: *ref_1
      parameters:
        - $ref: '#/components/parameters/SellerID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequestPayload'
      responses:
        '201':
          description: Item added successfully.
          content: {}
          headers: {}
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: Seller not exists.
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
    parameters: []
  /api/sellers/{sellerId}/items/{itemId}:
    delete:
      summary: Delete item of seller
      description: ''
      operationId: seller-delete-item
      tags: &ref_2
        - Seller
      parameters:
        - $ref: '#/components/parameters/SellerID'
        - $ref: '#/components/parameters/ItemID'
      requestBody: &ref_3 {}
      responses:
        '200':
          description: Item deleted successfully.
          content: {}
          headers: {}
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: Seller or item not exists.
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
    put:
      summary: Update item of seller
      description: ''
      operationId: seller-update-item
      tags: *ref_2
      parameters:
        - $ref: '#/components/parameters/SellerID'
        - $ref: '#/components/parameters/ItemID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequestPayload'
      responses:
        '200':
          description: Item updated
          content: {}
          headers: {}
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: Seller or item not exists.
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
    parameters: []
  /api/sellers/{sellerId}/items/{itemId}/publish:
    post:
      summary: Publish an item of seller
      description: ''
      operationId: seller-item-publish
      tags: &ref_4
        - Seller
      parameters: &ref_5
        - $ref: '#/components/parameters/SellerID'
        - $ref: '#/components/parameters/ItemID'
      requestBody: *ref_3
      responses:
        '200':
          description: Item published
          content: &ref_6 {}
          headers: &ref_7 {}
        '401': &ref_8
          description: ''
          content: {}
          headers: {}
        '404': &ref_9
          description: Seller or item not exists.
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security: &ref_10
        - http-jwt: []
  /api/sellers/{sellerId}/items/{itemId}/unpublish:
    post:
      summary: Unpublish an item of seller
      description: ''
      operationId: seller-item-unpublish
      tags: *ref_4
      parameters: *ref_5
      requestBody: *ref_3
      responses:
        '200':
          description: Item unpublished
          content: *ref_6
          headers: *ref_7
        '401': *ref_8
        '404': *ref_9
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security: *ref_10
  /api/sellers/{sellerId}/items/{itemId}/fulfill:
    post:
      summary: Fulfill an item of seller
      description: ''
      operationId: seller-item-fulfill
      tags: *ref_4
      parameters: *ref_5
      requestBody: *ref_3
      responses:
        '200':
          $ref: '#/components/responses/ItemFulfillResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '401': *ref_8
        '404': *ref_9
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security: *ref_10
  /api/sellers/{sellerId}/items/{itemId}/archive:
    post:
      summary: Archive an item of seller
      description: ''
      operationId: seller-item-archive
      tags: *ref_4
      parameters: *ref_5
      requestBody: *ref_3
      responses:
        '200':
          description: Item archived
          content: *ref_6
          headers: *ref_7
        '400': &ref_11
          $ref: '#/components/responses/ErrorResponse'
        '401': *ref_8
        '404': *ref_9
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security: *ref_10
  /api/sellers/{sellerId}/items/{itemId}/request-unfreeze:
    post:
      summary: Request unfreeze an item of seller.
      description: ''
      operationId: seller-item-request-unfreeze
      tags: *ref_4
      parameters: *ref_5
      requestBody: *ref_3
      responses:
        '200':
          description: Added request.
          content: *ref_6
          headers: *ref_7
        '400': *ref_11
        '401': *ref_8
        '404': *ref_9
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security: *ref_10
  /api/buyers/{buyerId}/close:
    post:
      summary: Close buyer account.
      description: ''
      operationId: buyer-close
      tags:
        - Buyer
      parameters:
        - $ref: '#/components/parameters/BuyerID'
      requestBody: {}
      responses:
        '202':
          description: Buyer account closed.
          content: {}
          headers: {}
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: Buyer not found
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
  /api/buyers/{buyerId}/add-funds:
    post:
      summary: Add funds to buyer account.
      description: ''
      operationId: buyer-add-funds
      tags:
        - Buyer
      parameters:
        - $ref: '#/components/parameters/BuyerID'
      requestBody:
        $ref: '#/components/requestBodies/AddFundRequest'
      responses:
        '200':
          $ref: '#/components/responses/AddFundResponse'
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: Buyer not exists
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
  /api/buyers/{buyerId}/bids:
    get:
      summary: Get current bids of the buyer
      description: ''
      operationId: buyer-bids
      tags:
        - Buyer
      parameters:
        - $ref: '#/components/parameters/BuyerID'
      requestBody:
        $ref: ''
      responses:
        '200':
          description: Get buyer's bids successfully
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bid'
                description: List of bids
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: Buyer not found
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
    post:
      summary: Put bid on an item
      description: ''
      operationId: buyer-bids-place
      tags:
        - Buyer
      parameters:
        - $ref: '#/components/parameters/BuyerID'
      requestBody:
        $ref: '#/components/requestBodies/ItemBidRequest'
      responses:
        '202':
          $ref: '#/components/responses/ItemBidResponse'
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: Buyer or item not found
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
  /api/buyers/{buyerId}/purchases:
    get:
      summary: Get purchases of a buyer
      description: ''
      operationId: buyer-purchases
      tags:
        - Buyer
      parameters:
        - $ref: '#/components/parameters/BuyerID'
      requestBody: {}
      responses:
        '200':
          description: Get list of purchases of the buyer
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'
                description: List of purchases
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: Buyer not found
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
  /api/items:
    get:
      summary: Search and sort items
      description: ''
      operationId: item-search
      tags:
        - Item
      parameters:
        - in: query
          name: keywords
          description: Keywords for searching item
          schema:
            type: string
        - in: query
          name: minPrice
          description: Minimum price for item price range
          schema: &ref_12
            type: number
        - in: query
          name: maxPrice
          description: Maximum price for item price range
          schema: *ref_12
        - in: query
          name: sortBy
          description: Field to sort by
          schema:
            type: string
            enum:
              - price
              - date
        - in: query
          name: sortOrder
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
      requestBody: &ref_13 {}
      responses:
        '200':
          description: List of items
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '401':
          description: ''
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/items/active:
    get:
      summary: Get all active items
      description: ''
      operationId: item-get-active
      tags:
        - Item
      parameters: []
      requestBody: *ref_13
      responses:
        '200':
          description: List of items
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  /api/items/{itemId}:
    get:
      summary: Get item details
      description: ''
      operationId: item-detail
      tags:
        - Item
      parameters:
        - $ref: '#/components/parameters/ItemID'
      requestBody: *ref_13
      responses:
        '200':
          description: Item
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/items/{itemId}/bids:
    get:
      summary: Get bids of an item
      description: ''
      operationId: item-bids
      tags:
        - Item
      parameters:
        - $ref: '#/components/parameters/ItemID'
      requestBody: *ref_13
      responses:
        '200':
          description: List of bids
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bid'
  /api/items/recently-sold:
    get:
      summary: Get recently sold items
      description: ''
      operationId: item-recently-sold
      tags:
        - Item
      parameters:
        - in: query
          name: keywords
          description: Keywords for searching item
          schema:
            type: string
        - in: query
          name: minPrice
          description: Minimum price for item price range
          schema: &ref_14
            type: number
        - in: query
          name: maxPrice
          description: Maximum price for item price range
          schema: *ref_14
        - in: query
          name: sortBy
          description: Field to sort by
          schema:
            type: string
            enum:
              - price
              - date
        - in: query
          name: sortOrder
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
      requestBody: {}
      responses:
        '200':
          description: List of items
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '500':
          $ref: '#/components/responses/ErrorResponse'
  /api/admin/items/{itemId}/freeze:
    post:
      summary: Freeze or unfreeze item
      description: ''
      operationId: admin-freeze-item
      tags:
        - Admin
      parameters:
        - $ref: '#/components/parameters/ItemID'
      requestBody:
        $ref: '#/components/requestBodies/ItemFreezeRequest'
      responses:
        '200':
          $ref: '#/components/responses/ItemFreezeResponse'
        '401':
          description: ''
          content: {}
          headers: {}
        '404':
          description: Item not exists
          content: {}
          headers: {}
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - http-jwt: []
  /api/admin/reports/auction:
    get:
      summary: Get auction report
      description: ''
      operationId: admin-auction-report
      tags: &ref_15
        - Admin
      parameters: &ref_16 []
      requestBody: &ref_17 {}
      responses:
        '200':
          description: ''
          headers: &ref_18 {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuctionReport'
        '401': &ref_19
          description: ''
          content: {}
          headers: {}
        '500': &ref_20
          $ref: '#/components/responses/ErrorResponse'
      security: &ref_21
        - http-jwt: []
  /api/admin/reports/forensic:
    get:
      summary: Get forensic report
      description: ''
      operationId: admin-forensic-report
      tags: *ref_15
      parameters: *ref_16
      requestBody: *ref_17
      responses:
        '200':
          description: ''
          headers: *ref_18
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForensicReport'
        '401': *ref_19
        '500': *ref_20
      security: *ref_21
components:
  schemas:
    UserInfo:
      type: object
      properties:
        username:
          type: string
          description: Username
        emailAddress:
          type: string
          format: email
          description: User email
        userId:
          type: string
          description: User ID
        userType:
          type: string
          enum:
            - seller
            - buyer
          description: User type, one of [seller, buyer]
        role:
          type: string
          enum:
            - admin
            - user
          description: User role, one of [admin, user]
        token:
          type: string
          description: JWT token
      required:
        - username
        - emailAddress
        - userId
        - role
        - token
        - userType
      description: User info
    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Item ID, in UUID
        name:
          type: string
          description: Item name
        description:
          type: string
          description: Item description
        initPrice:
          type: number
          description: Initial price, > $1
        startDate:
          type: string
          format: date-time
          description: Auction start date time
        endDate:
          type: string
          format: date-time
          description: Auction end date time
        lengthOfAuction:
          type: integer
          description: Auction length, in days
        itemState:
          type: string
          enum:
            - active
            - archived
            - completed
            - failed
            - inactive
          description: Current state of item
        isFrozen:
          type: boolean
          description: Freeze status
        images:
          type: array
          items:
            type: string
            format: uuid
          description: S3 image keys
        currentBidId:
          type: string
          format: uuid
          description: Current bid ID, in UUID
        pastBidIds:
          type: array
          items:
            type: string
            format: uuid
            description: Bid ID, in UUID
          description: Historic bids
        soldBidId:
          type: string
          format: uuid
          description: Item sold bid ID, in UUID
        sellerId:
          type: string
          description: Seller ID who posted the item
        createAt:
          type: integer
          format: int64
          description: UNIX Timestamp
      required:
        - id
        - name
        - description
        - initPrice
        - lengthOfAuction
        - itemState
        - images
        - sellerId
        - startDate
        - endDate
        - createAt
        - isFrozen
      description: Item in auction
    Bid:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Bid ID, in UUID
        bidItemId:
          type: string
          format: uuid
          description: Item ID of the bid, in UUID
        bidUserId:
          type: string
          description: Buyer ID who placed the bid
        bidAmount:
          type: number
          minimum: 1
          description: Bid amount
        bidTime:
          type: string
          format: date-time
          description: Bid time
        createAt:
          type: integer
          format: int64
          description: UNIX Timestamp
      required:
        - id
        - bidItemId
        - bidUserId
        - bidAmount
        - bidTime
        - createAt
      description: Bid to an item
    Purchase:
      type: object
      properties:
        itemId:
          type: string
          description: Item ID, in UUID
          format: uuid
        itemName:
          type: string
          description: Item name
        price:
          type: number
          description: Purchased price
        soldTime:
          type: string
          description: Item sold time
          format: date-time
        fulfillTime:
          type: string
          description: Purchase fulfilled time
          format: date-time
      description: Purchase Data
      required:
        - itemId
        - itemName
        - price
        - soldTime
        - fulfillTime
    AuctionReport:
      type: object
      properties:
        totalCommissionEarned:
          type: number
          format: float
        totalSales:
          type: number
          format: float
        commissionRate:
          type: number
          format: float
        itemsSold:
          type: array
          items:
            type: object
            properties:
              itemId:
                type: string
              salePrice:
                type: number
              commission:
                type: number
    ForensicReport:
      type: object
      properties:
        reportId:
          type: string
          format: uuid
        url:
          type: string
          format: uri
      required:
        - reportId
        - url
    ItemRequestPayload:
      type: object
      properties:
        name:
          type: string
          description: Item name
        description:
          type: string
          description: Item description
        initPrice:
          type: number
          minimum: 1
          description: Initial price of item, > $1
        lengthOfAuction:
          type: integer
          minimum: 1
          description: Length of auction in days
        images:
          type: array
          items:
            type: string
            format: uuid
            description: S3 object key
          description: S3 object keys for the images
      required:
        - name
        - description
        - initPrice
        - lengthOfAuction
        - images
  securitySchemes:
    http-jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Token Authentication
  requestBodies:
    UserLoginRequest:
      required: false
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              emailAddress:
                type: string
                description: User email
              password:
                type: string
                description: User password
            required:
              - emailAddress
              - password
            description: User login payload
          examples:
            example1:
              value:
                emailAddress: foo@bar
                password: abc123
    UserRegisterRequest:
      required: false
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                description: Username
              emailAddress:
                type: string
                format: email
                description: User email address
              password:
                type: string
                description: User password
              firstName:
                type: string
                description: User first name
              lastName:
                type: string
                description: User last name
              userType:
                type: string
                enum:
                  - seller
                  - buyer
                description: User type, one of [seller, buyer]
              role:
                type: string
                enum:
                  - admin
                  - user
                description: User role, one of [admin, user]
            required:
              - username
              - emailAddress
              - password
              - firstName
              - lastName
              - userType
              - role
            description: User register payload
    AddFundRequest:
      required: false
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              amount:
                type: number
                description: Amount of funds to add
            required:
              - amount
    ItemBidRequest:
      required: false
      description: Bid an item
      content:
        application/json:
          schema:
            type: object
            properties:
              itemId:
                type: string
                description: Item ID to bid, in UUID
                format: uuid
              bidAmount:
                type: number
                description: Bid amount
            required:
              - itemId
              - bidAmount
            description: Bid info
    ItemFreezeRequest:
      required: false
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              action:
                type: string
                description: Freeze or unfreeze
                enum:
                  - freeze
                  - unfreeze
            required:
              - action
  responses:
    UserAuthResponse:
      description: ''
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              info:
                $ref: '#/components/schemas/UserInfo'
            description: User Info
            required:
              - info
          examples:
            example1:
              value:
                info:
                  username: vinayakrevankar
                  emailAddress: vinayakanrevankar@gmail.com
                  userType: seller
                  userId: VIRE827829
                  role: admin
                  token: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InZpbmF5YWtyZXZhbmthciIsImVtYWlsIjoidmluYXlha2FucmV2YW5rYXJAZ21haWwuY29tIiwicm9sZSI6ImFkbWluIiwidXNlclR5cGUiOiJzZWxsZXIiLCJzZWxsZXJJZCI6IlZJUkU4OTQ0NDc1NyIsImlhdCI6MTczMDc1OTMwMSwiZXhwIjoxNzMwNzYwMjAxfQ.b7eDEKKeyixU6fOTC2qo6uFZvc0W5m25wfg9Rr7hMk8
    ImageUploadResponse:
      description: ''
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              key:
                type: string
                description: S3 object key
                format: uuid
            required:
              - key
          examples:
            example1:
              value:
                key: e24951e4-4b64-4cb2-9d62-2083d0ca18bb
    ItemFulfillResponse:
      description: Item fulfilled.
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              itemId:
                type: string
              soldBid:
                $ref: '#/components/schemas/Bid'
              soldTime:
                type: string
                format: date-time
            required:
              - itemId
              - soldBid
              - soldTime
    ErrorResponse:
      description: Internal error response
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error source
              src:
                type: string
                description: Error message from error source
            required:
              - error
              - src
    AddFundResponse:
      description: ''
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              buyerId:
                type: string
                description: ID of the buyer
              funds:
                type: number
                description: Current fund of the buyer
            required:
              - buyerId
              - funds
    ItemBidResponse:
      description: ''
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              bid:
                $ref: '#/components/schemas/Bid'
            required:
              - bid
    ItemFreezeResponse:
      description: ''
      headers: {}
      content:
        application/json:
          schema:
            type: object
            properties:
              itemId:
                type: string
                description: Target item ID, in UUID
                format: uuid
              isFrozen:
                type: boolean
            required:
              - itemId
              - isFrozen
  parameters:
    SellerID:
      in: path
      required: true
      description: ''
      schema:
        type: string
      name: sellerId
    ItemID:
      in: path
      required: true
      description: ''
      schema:
        type: string
        format: uuid
      name: itemId
    BuyerID:
      in: path
      required: true
      description: ''
      schema:
        type: string
      name: buyerId
security:
  - http-jwt: []

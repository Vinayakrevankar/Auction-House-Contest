openapi: 3.0.3
info:
  title: Auction House
  description: This is a sample description about this spec.
  termsOfService: ""
  contact:
    email: pchen1@wpi.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about spec
  url: ""
servers: []
tags:
  - name: Default
    description: ""
  - name: User
    description: ""
    externalDocs:
      description: ""
      url: ""
  - name: Image
    description: ""
    externalDocs:
      description: ""
      url: ""
  - name: Seller
    description: ""
    externalDocs:
      description: ""
      url: ""
  - name: Buyer
    description: ""
    externalDocs:
      description: ""
      url: ""
  - name: Item
    description: ""
    externalDocs:
      description: ""
      url: ""
  - name: Admin
    description: ""
    externalDocs:
      description: ""
      url: ""
paths:
  /api/login:
    post:
      summary: User Login Endpoint
      description: ""
      operationId: user-login
      tags:
        - User
      parameters: []
      requestBody:
        $ref: "#/components/requestBodies/UserLoginRequest"
      responses:
        "202":
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    $ref: "#/components/schemas/UserInfo"
                required:
                  - status
                  - message
                  - payload
          description: Login Success
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /api/register:
    post:
      summary: User Register Endpoint
      description: ""
      operationId: user-register
      tags:
        - User
      parameters: []
      requestBody:
        $ref: "#/components/requestBodies/UserRegisterRequest"
      responses:
        "201":
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    $ref: "#/components/schemas/UserInfo"
                required:
                  - status
                  - message
                  - payload
          description: Register Success
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /api/upload-image:
    post:
      summary: Upload image to S3
      description: ""
      operationId: upload-image
      tags:
        - Image
      parameters: []
      requestBody:
        description: ""
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: Image data to upload
                  format: binary
              required:
                - image
            examples:
              example1:
                value:
                  image: <binary data...>
      responses:
        "201":
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    type: object
                    properties:
                      key:
                        type: string
                        description: S3 object key
                    description: Response Payload
                    required:
                      - key
                required:
                  - status
                  - message
                  - payload
          description: Image uploaded to S3
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /api/sellers/{sellerId}/close:
    post:
      summary: Close seller account
      description: ""
      operationId: seller-close
      tags:
        - Seller
      parameters:
        - $ref: "#/components/parameters/SellerID"
      requestBody:
        content: {}
      responses:
        "202":
          $ref: "#/components/responses/PlainSuccessResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
    parameters: []
  /api/sellers/{sellerId}/items:
    get:
      summary: Get seller's items
      description: ""
      operationId: seller-review-item
      tags:
        - Seller
      parameters:
        - $ref: "#/components/parameters/SellerID"
      responses:
        "200":
          description: Returns seller's items
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Item"
                    description: Response Payload
                required:
                  - status
                  - message
                  - payload
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
    post:
      summary: Add item for seller
      description: ""
      operationId: seller-add-item
      tags:
        - Seller
      parameters:
        - $ref: "#/components/parameters/SellerID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequestPayload"
      responses:
        "201":
          $ref: "#/components/responses/PlainSuccessResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
    parameters: []
  /api/sellers/{sellerId}/items/{itemId}:
    delete:
      summary: Delete item of seller
      description: ""
      operationId: seller-delete-item
      tags:
        - Seller
      parameters:
        - $ref: "#/components/parameters/SellerID"
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          $ref: "#/components/responses/PlainSuccessResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
    put:
      summary: Update item of seller
      description: ""
      operationId: seller-update-item
      tags:
        - Seller
      parameters:
        - $ref: "#/components/parameters/SellerID"
        - $ref: "#/components/parameters/ItemID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequestPayload"
      responses:
        "200":
          $ref: "#/components/responses/PlainSuccessResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
    parameters: []
  /api/sellers/{sellerId}/items/{itemId}/publish:
    post:
      summary: Publish an item of seller
      description: ""
      operationId: seller-item-publish
      tags:
        - Seller
      parameters:
        - $ref: "#/components/parameters/SellerID"
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          $ref: "#/components/responses/PlainSuccessResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/sellers/{sellerId}/items/{itemId}/unpublish:
    post:
      summary: Unpublish an item of seller
      description: ""
      operationId: seller-item-unpublish
      tags:
        - Seller
      parameters:
        - $ref: "#/components/parameters/SellerID"
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          $ref: "#/components/responses/PlainSuccessResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/sellers/{sellerId}/items/{itemId}/fulfill:
    post:
      summary: Fulfill an item of seller
      description: ""
      operationId: seller-item-fulfill
      tags:
        - Seller
      parameters:
        - $ref: "#/components/parameters/SellerID"
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    $ref: "#/components/schemas/ItemFulfillResponsePayload"
                required:
                  - status
                  - message
                  - payload
          description: Item fulfilled
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/sellers/{sellerId}/items/{itemId}/archive:
    post:
      summary: Archive an item of seller
      description: ""
      operationId: seller-item-archive
      tags:
        - Seller
      parameters:
        - $ref: "#/components/parameters/SellerID"
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          $ref: "#/components/responses/PlainSuccessResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/sellers/{sellerId}/items/{itemId}/request-unfreeze:
    post:
      summary: Request unfreeze an item of seller.
      description: ""
      operationId: seller-item-request-unfreeze
      tags:
        - Seller
      parameters:
        - $ref: "#/components/parameters/SellerID"
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          $ref: "#/components/responses/PlainSuccessResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/buyers/{buyerId}/close:
    post:
      summary: Close buyer account.
      description: ""
      operationId: buyer-close
      tags:
        - Buyer
      parameters:
        - $ref: "#/components/parameters/BuyerID"
      responses:
        "202":
          $ref: "#/components/responses/PlainSuccessResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/buyers/{buyerId}/add-funds:
    post:
      summary: Add funds to buyer account.
      description: ""
      operationId: buyer-add-funds
      tags:
        - Buyer
      parameters:
        - $ref: "#/components/parameters/BuyerID"
      requestBody:
        $ref: "#/components/requestBodies/AddFundRequest"
      responses:
        "200":
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    $ref: "#/components/schemas/AddFundsResponsePayload"
                required:
                  - status
                  - message
                  - payload
          description: Funds added
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/buyers/{buyerId}/bids:
    get:
      summary: Get current bids of the buyer
      description: ""
      operationId: buyer-bids
      tags:
        - Buyer
      parameters:
        - $ref: "#/components/parameters/BuyerID"
      responses:
        "200":
          description: Get buyer's bids successfully
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Bid"
                    description: Response Payload
                required:
                  - status
                  - message
                  - payload
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
    post:
      summary: Put bid on an item
      description: ""
      operationId: buyer-bids-place
      tags:
        - Buyer
      parameters:
        - $ref: "#/components/parameters/BuyerID"
      requestBody:
        $ref: "#/components/requestBodies/ItemBidRequest"
      responses:
        "202":
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    $ref: "#/components/schemas/Bid"
                required:
                  - status
                  - message
                  - payload
          description: Bid placed
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/buyers/{buyerId}/purchases:
    get:
      summary: Get purchases of a buyer
      description: ""
      operationId: buyer-purchases
      tags:
        - Buyer
      parameters:
        - $ref: "#/components/parameters/BuyerID"
      responses:
        "200":
          description: Get list of purchases of the buyer
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Purchase"
                    description: Response Payload
                required:
                  - status
                  - message
                  - payload
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/items:
    get:
      summary: Search and sort items
      description: ""
      operationId: item-search
      tags:
        - Item
      parameters:
        - in: query
          name: keywords
          description: Keywords for searching item
          schema:
            type: string
        - in: query
          name: minPrice
          description: Minimum price for item price range
          schema:
            type: number
        - in: query
          name: maxPrice
          description: Maximum price for item price range
          schema:
            type: number
        - in: query
          name: sortBy
          description: Field to sort by
          schema:
            type: string
            enum:
              - price
              - date
        - in: query
          name: sortOrder
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          description: List of items
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    $ref: "#/components/schemas/Item"
                required:
                  - status
                  - message
                  - payload
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /api/items/active:
    get:
      summary: Get all active items
      description: ""
      operationId: item-get-active
      tags:
        - Item
      parameters: []
      responses:
        "200":
          description: List of items
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Item"
                    description: Response Payload
                required:
                  - status
                  - message
                  - payload
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /api/items/{itemId}:
    get:
      summary: Get item details
      description: ""
      operationId: item-detail
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          description: Item
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    $ref: "#/components/schemas/Item"
                required:
                  - status
                  - message
                  - payload
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /api/items/{itemId}/bids:
    get:
      summary: Get bids of an item
      description: ""
      operationId: item-bids
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          description: List of bids
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Bid"
                    description: Response Payload
                required:
                  - status
                  - message
                  - payload
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /api/items/recently-sold:
    get:
      summary: Get recently sold items
      description: ""
      operationId: item-recently-sold
      tags:
        - Item
      parameters:
        - in: query
          name: keywords
          description: Keywords for searching item
          schema:
            type: string
        - in: query
          name: minPrice
          description: Minimum price for item price range
          schema:
            type: number
        - in: query
          name: maxPrice
          description: Maximum price for item price range
          schema:
            type: number
        - in: query
          name: sortBy
          description: Field to sort by
          schema:
            type: string
            enum:
              - price
              - date
        - in: query
          name: sortOrder
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        "200":
          description: List of items
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Item"
                    description: Response Payload
                required:
                  - status
                  - message
                  - payload
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /api/admin/items/{itemId}/freeze:
    post:
      summary: Freeze or unfreeze item
      description: ""
      operationId: admin-freeze-item
      tags:
        - Admin
      parameters:
        - $ref: "#/components/parameters/ItemID"
      requestBody:
        $ref: "#/components/requestBodies/ItemFreezeRequest"
      responses:
        "200":
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    type: object
                    properties:
                      itemId:
                        type: string
                        description: Target item ID
                      isFrozen:
                        type: string
                        description: Freeze state after operation
                    description: Response Payload
                    required:
                      - itemId
                      - isFrozen
                required:
                  - status
                  - message
                  - payload
          description: Freeze state changed
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/admin/reports/auction:
    get:
      summary: Get auction report
      description: ""
      operationId: admin-auction-report
      tags:
        - Admin
      parameters: []
      responses:
        "200":
          description: Report generated
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    $ref: "#/components/schemas/AuctionReport"
                required:
                  - status
                  - message
                  - payload
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/admin/reports/forensic:
    get:
      summary: Get forensic report
      description: ""
      operationId: admin-forensic-report
      tags:
        - Admin
      parameters: []
      responses:
        "200":
          description: Report generated
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    $ref: "#/components/schemas/ForensicReport"
                required:
                  - status
                  - message
                  - payload
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
      security:
        - http-jwt: []
  /api/items/{itemId}/check-expired:
    post:
      summary: Check and update if item is expired or not.
      description: ""
      operationId: item-check-expired
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/ItemID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    type: object
                    properties:
                      isExpired:
                        type: boolean
                        description: Expire status
                    description: Response Payload
                    required:
                      - isExpired
                required:
                  - status
                  - message
                  - payload
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /api/get-user-funds:
    get:
      summary: Get funds from user profile
      description: ""
      operationId: profile-funds
      tags:
        - User
      responses:
        "200":
          description: Fund details
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: Response HTTP status
                  message:
                    type: string
                    description: Response message
                  payload:
                    userId:
                      type: string
                      description: User ID
                    funds:
                      type: float
                      description: User fund
                    fundsOnHold:
                      type: float
                      description: User funds on hold
                required:
                  - status
                  - message
                  - payload
        "500":
          $ref: "#/components/responses/ErrorResponse"

components:
  schemas:
    UserInfo:
      type: object
      properties:
        username:
          type: string
          description: Username
        emailAddress:
          type: string
          format: email
          description: User email
        userId:
          type: string
          description: User ID
        userType:
          type: string
          enum:
            - seller
            - buyer
          description: User type, one of [seller, buyer]
        role:
          type: string
          enum:
            - admin
            - user
          description: User role, one of [admin, user]
        token:
          type: string
          description: JWT token
      required:
        - username
        - emailAddress
        - userId
        - role
        - token
        - userType
      description: User info
    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Item ID, in UUID
        name:
          type: string
          description: Item name
        description:
          type: string
          description: Item description
        initPrice:
          type: number
          description: Initial price, > $1
        startDate:
          type: string
          format: date-time
          description: Auction start date time
        endDate:
          type: string
          format: date-time
          description: Auction end date time
        lengthOfAuction:
          type: integer
          description: Auction length, in days
        isAvailableToBuy:
          type: boolean
          description: Is item available to buy immediately
        itemState:
          type: string
          enum:
            - active
            - archived
            - completed
            - failed
            - inactive
          description: Current state of item
        isFrozen:
          type: boolean
          description: Freeze status
        images:
          type: array
          items:
            type: string
            format: uuid
          description: S3 image keys
        currentBidId:
          type: string
          format: uuid
          description: Current bid ID, in UUID
        pastBidIds:
          type: array
          items:
            type: string
            format: uuid
            description: Bid ID, in UUID
          description: Historic bids
        soldBidId:
          type: string
          format: uuid
          description: Item sold bid ID, in UUID
        sellerId:
          type: string
          description: Seller ID who posted the item
        createAt:
          type: integer
          format: int64
          description: UNIX Timestamp
      required:
        - id
        - name
        - description
        - initPrice
        - lengthOfAuction
        - itemState
        - images
        - sellerId
        - startDate
        - endDate
        - createAt
        - isFrozen
      description: Item in auction
    Bid:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Bid ID, in UUID
        bidItemId:
          type: string
          format: uuid
          description: Item ID of the bid, in UUID
        bidUserId:
          type: string
          description: Buyer ID who placed the bid
        bidAmount:
          type: number
          minimum: 1
          description: Bid amount
        bidTime:
          type: string
          format: date-time
          description: Bid time
        createAt:
          type: integer
          format: int64
          description: UNIX Timestamp
        isActive:
          type: boolean
          description: Is this bid the active bid of the item
      required:
        - id
        - bidItemId
        - bidUserId
        - bidAmount
        - bidTime
        - createAt
        - isActive
      description: Bid to an item
    Purchase:
      type: object
      properties:
        itemId:
          type: string
          description: Item ID, in UUID
          format: uuid
        itemName:
          type: string
          description: Item name
        price:
          type: number
          description: Purchased price
        soldTime:
          type: string
          description: Item sold time
          format: date-time
        fulfillTime:
          type: string
          description: Purchase fulfilled time
          format: date-time
      description: Purchase Data
      required:
        - itemId
        - itemName
        - price
        - soldTime
        - fulfillTime
    AuctionReport:
      type: object
      properties:
        totalCommissionEarned:
          type: number
          format: float
        totalSales:
          type: number
          format: float
        commissionRate:
          type: number
          format: float
        itemsSold:
          type: array
          items:
            type: object
            properties:
              itemId:
                type: string
              salePrice:
                type: number
              commission:
                type: number
    ForensicReport:
      type: object
      properties:
        reportId:
          type: string
          format: uuid
        url:
          type: string
          format: uri
      required:
        - reportId
        - url
    ItemRequestPayload:
      type: object
      properties:
        name:
          type: string
          description: Item name
        description:
          type: string
          description: Item description
        initPrice:
          type: number
          minimum: 1
          description: Initial price of item, > $1
        lengthOfAuction:
          type: integer
          minimum: 1
          description: Length of auction in days
        isAvailableToBuy:
          type: boolean
          description: Is item available to buy immediately
        images:
          type: array
          items:
            type: string
            format: uuid
            description: S3 object key
          description: S3 object keys for the images
      required:
        - name
        - description
        - initPrice
        - lengthOfAuction
        - images
    ItemFulfillResponsePayload:
      type: object
      properties:
        itemId:
          type: string
        soldBid:
          $ref: "#/components/schemas/Bid"
        soldTime:
          type: string
          format: date-time
      required:
        - itemId
        - soldBid
        - soldTime
    AddFundsResponsePayload:
      type: object
      properties:
        userId:
          type: string
          description: User ID of the target user
        funds:
          type: string
          description: Funds after operation
      required:
        - userId
        - funds
    ErrorResponsePayload:
      type: object
      properties:
        status:
          type: integer
        errorCode:
          type: string
        message:
          type: string
      required:
        - status
        - message
    PlainSuccessResponsePayload:
      type: object
      properties:
        status:
          type: integer
          description: Response HTTP status
        message:
          type: string
          description: Response message
      required:
        - status
        - message
  securitySchemes:
    http-jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Token Authentication
  requestBodies:
    UserLoginRequest:
      required: false
      description: ""
      content:
        application/json:
          schema:
            type: object
            properties:
              emailAddress:
                type: string
                description: User email
              password:
                type: string
                description: User password
            required:
              - emailAddress
              - password
            description: User login payload
          examples:
            example1:
              value:
                emailAddress: foo@bar
                password: abc123
    UserRegisterRequest:
      required: false
      description: ""
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                description: Username
              emailAddress:
                type: string
                format: email
                description: User email address
              password:
                type: string
                description: User password
              firstName:
                type: string
                description: User first name
              lastName:
                type: string
                description: User last name
              userType:
                type: string
                enum:
                  - seller
                  - buyer
                description: User type, one of [seller, buyer]
              role:
                type: string
                enum:
                  - admin
                  - user
                description: User role, one of [admin, user]
            required:
              - username
              - emailAddress
              - password
              - firstName
              - lastName
              - userType
              - role
            description: User register payload
    AddFundRequest:
      required: false
      description: ""
      content:
        application/json:
          schema:
            type: object
            properties:
              amount:
                type: number
                description: Amount of funds to add
            required:
              - amount
    ItemBidRequest:
      required: false
      description: Bid an item
      content:
        application/json:
          schema:
            type: object
            properties:
              itemId:
                type: string
                description: Item ID to bid, in UUID
                format: uuid
              bidAmount:
                type: number
                description: Bid amount
              isAvailableToBuy:
                type: boolean
                description: Is item available to buy immediately
            required:
              - itemId
              - bidAmount
            description: Bid info
    ItemFreezeRequest:
      required: false
      description: ""
      content:
        application/json:
          schema:
            type: object
            properties:
              action:
                type: string
                description: Freeze or unfreeze
                enum:
                  - freeze
                  - unfreeze
            required:
              - action
  responses:
    ErrorResponse:
      description: Error with code and message
      headers: {}
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponsePayload"
    PlainSuccessResponse:
      description: Success Response without payload
      headers: {}
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PlainSuccessResponsePayload"
  parameters:
    SellerID:
      in: path
      required: true
      description: ""
      schema:
        type: string
      name: sellerId
    ItemID:
      in: path
      required: true
      description: ""
      schema:
        type: string
        format: uuid
      name: itemId
    BuyerID:
      in: path
      required: true
      description: ""
      schema:
        type: string
      name: buyerId
security:
  - http-jwt: []
